syntax = "proto3";

package aeraki.meta_protocol_proxy.v1alpha;

import "envoy/annotations/deprecation.proto";
import "envoy/config/accesslog/v3/accesslog.proto";
import "envoy/config/core/v3/config_source.proto";
import "envoy/config/trace/v3/http_tracer.proto";
import "envoy/type/v3/percent.proto";

import "api/meta_protocol_proxy/config/route/v1alpha/route.proto";

import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";

import "udpa/annotations/status.proto";
import "validate/validate.proto";
import "google/protobuf/duration.proto";

option java_package = "net.aeraki.meta_protocol_proxy.v1alpha";
option java_outer_classname = "MetaProtocolProxyProto";
option java_multiple_files = true;
option go_package = "github.com/aeraki-mesh/meta-protocol-control-plane-api/meta_protocol_proxy/v1alpha;v1alpha";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Meta Protocol proxy]
// Meta Protocol proxy :ref:`configuration overview <config_meta_protocol_proxy>`.
// [#extension: envoy.filters.network.meta_protocol_proxy]

// [#next-free-field: 7]
message MetaProtocolProxy {

  // The human readable prefix to use when emitting statistics.
  string stat_prefix = 1 [(validate.rules).string = {min_len: 1}];

  // The name of the application protocol built on top of meta protocol.
  // This has been deprecated in favor of name in ApplicationProtocol.
  string application_protocol = 2 [deprecated = true];

  oneof route_specifier {
    option (validate.required) = true;

    // The meta protocol proxyâ€™s route table will be dynamically loaded via the RDS API.
    Rds rds = 3;

    // The route table for the meta protocol proxy is static and is specified in this property.
    config.route.v1alpha.RouteConfiguration route_config = 4;
  }

  // The codec which encodes and decodes the application protocol.
  // This has been deprecated in favor of codec in ApplicationProtocol.
  Codec codec = 5 [deprecated = true];


  // A list of individual Layer-7 filters that make up the filter chain for requests made to
  // the meta protocol proxy. Order matters as the filters are processed sequentially as
  // request events happen. If no meta_protocol_filters are specified, a default router filter
  // (`aeraki.meta_protocol.filters.router`) is used.
  repeated MetaProtocolFilter meta_protocol_filters = 6;

  // Presence of the object defines whether the connection manager emits tracing data to the
  // configured tracing provider.
  Tracing tracing = 7;

  // Configuration for access logs emitted by the this tcp_proxy.
  repeated envoy.config.accesslog.v3.AccessLog access_log = 8;

  // for idle downstream timer.
  google.protobuf.Duration idle_timeout = 11;

  // Configuration for protocol
  ApplicationProtocol protocol = 12;
}

message Rds {
  // Configuration source specifier for RDS.
  envoy.config.core.v3.ConfigSource config_source = 1 [(validate.rules).message = {required: true}];

  // The name of the route configuration. This name will be passed to the RDS
  // API. This allows an Envoy configuration with multiple HTTP listeners (and
  // associated HTTP connection manager filters) to use different route
  // configurations.
  string route_config_name = 2;
}

// MetaProtocolFilter configures a MetaProtocol filter.
message MetaProtocolFilter {
  // The name of the filter to instantiate. The name must match a supported filter.
  string name = 1 [(validate.rules).string = {min_len: 1}];

  // Filter specific configuration which depends on the filter being
  // instantiated. See the supported filters for further documentation.
  google.protobuf.Any config = 2;
}

message Codec {
  // The name of the codec configuration.
  string name = 1 [(validate.rules).string = {min_len: 1}];

  // Codec specific configuration which depends on the codec being instantiated.
  google.protobuf.Any config = 2;
}

message Tracing {
  enum OperationName {
    // The HTTP listener is used for ingress/incoming requests.
    INGRESS = 0;

    // The HTTP listener is used for egress/outgoing requests.
    EGRESS = 1;
  }

  reserved 1, 2;

  reserved "operation_name", "request_metadata_for_tags";

  // Target percentage of requests managed by this connection manager that will be force
  // traced if the x-client-trace-id header is set. This field is a direct analog for the
  // runtime variable 'tracing.client_sampling' in the Connection Manager.
  // Default: 100%
  envoy.type.v3.Percent client_sampling = 3;

  // Target percentage of requests managed by this connection manager that will be randomly
  // selected for trace generation, if not requested by the client or not forced. This field is
  // a direct analog for the runtime variable 'tracing.random_sampling' in the Connection Manager.
  // Default: 100%
  envoy.type.v3.Percent random_sampling = 4;

  // Target percentage of requests managed by this connection manager that will be traced
  // after all other sampling checks have been applied (client-directed, force tracing, random
  // sampling). This field functions as an upper limit on the total configured sampling rate. For
  // instance, setting client_sampling to 100% but overall_sampling to 1% will result in only 1%
  // of client requests with the appropriate headers to be force traced. This field is a direct
  // analog for the runtime variable 'tracing.global_enabled' in the Connection Manager.
  // Default: 100%
  envoy.type.v3.Percent overall_sampling = 5;

  // Whether to annotate spans with additional data. If true, spans will include logs for stream
  // events.
  bool verbose = 6;

  // Maximum length of the metadata to extract and include in the tracing tag. Used to
  // truncate lengthy metadata to meet the needs of a tracing backend.
  // Default: 256
  google.protobuf.UInt32Value max_tag_length = 7;

  // Configuration for an external tracing provider.
  // If not specified, no tracing will be performed.
  //
  // .. attention::
  //   Please be aware that *envoy.tracers.opencensus* provider can only be configured once
  //   in Envoy lifetime.
  //   Any attempts to reconfigure it or to use different configurations for different HCM filters
  //   will be rejected.
  //   Such a constraint is inherent to OpenCensus itself. It cannot be overcome without changes
  //   on OpenCensus side.
  envoy.config.trace.v3.Tracing.Http provider = 9;
}

message ApplicationProtocol {
  // The name of the application protocol built on top of meta protocol.
  string name = 1 [(validate.rules).string = {min_len: 1}];
  // The codec which encodes and decodes the application protocol.
  Codec codec = 2;
  // is multiplexing
  bool multiplexing = 3;
}

