syntax = "proto3";

package aeraki.meta_protocol_proxy.filters.local_ratelimit.v1alpha;

import "envoy/config/core/v3/base.proto";
import "envoy/type/v3/token_bucket.proto";

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.aeraki.meta_protocol_proxy.filters.local_ratelimit.v1alpha";
option java_outer_classname = "LocalRateLimitProto";
option java_multiple_files = true;
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Local rate limit]

message LocalRateLimit {
  repeated LocalRateLimitItem items = 1;
}

message LocalRateLimitItem {
  // The prefix to use when emitting :ref:`statistics
  // <config_network_filters_local_rate_limit_stats>`.
  string stat_prefix = 1 [(validate.rules).string = {min_len: 1}];

  // The token bucket configuration to use for rate limiting connections that are processed by the
  // filter's filter chain. Each incoming connection processed by the filter consumes a single
  // token. If the token is available, the connection will be allowed. If no tokens are available,
  // the connection will be immediately closed.
  //
  // .. note::
  //   In the current implementation each filter and filter chain has an independent rate limit.
  //
  // .. note::
  //   In the current implementation the token bucket's :ref:`fill_interval
  //   <envoy_v3_api_field_type.v3.TokenBucket.fill_interval>` must be >= 50ms to avoid too aggressive
  //   refills.
  envoy.type.v3.TokenBucket token_bucket = 2 [(validate.rules).message = {required: true}];

  repeated RateLimitMatch match = 3;
}

message RateLimitMatch {
  // key
  string key = 1 [(validate.rules).string = {min_len: 1}];
  // value match, empty to match all
  string value = 2;
}